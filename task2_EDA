# 1. Imports & settings
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

sns.set(style='whitegrid')
os.makedirs('plots', exist_ok=True)

# 2. Load data
df = pd.read_csv(r"C:\Users\apoor\OneDrive\Documents\task2_EDA\train.csv")  # full path
print("Shape:", df.shape)
print(df.head())  # replaced display with print
#
# 3. Quick info & summary stats
print(df.info())  # replaced display with print
print(df.describe(include='all').transpose())  # replaced display with print

# 4. Missing values overview
print(df.isnull().sum())

# 5. Simple cleaning / feature engineering
df['HasCabin'] = df['Cabin'].notnull().astype(int)
df['FamilySize'] = df['SibSp'] + df['Parch'] + 1
df['IsAlone'] = (df['FamilySize'] == 1).astype(int)
df['Sex_bin'] = df['Sex'].map({'male': 0, 'female': 1})

# Impute Age with median (example)
df['Age'] = df['Age'].fillna(df['Age'].median())
# Impute Embarked with mode
df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])

# Save cleaned snapshot
df.to_csv('titanic_cleaned.csv', index=False)

# 6. Summary statistics export
df.describe(include='all').transpose().to_csv('summary_stats.csv')

# 7. Univariate visuals
plt.figure(figsize=(8,5))
sns.countplot(x='Survived', data=df)
plt.title('Survival count')
plt.savefig('plots/survival_count.png', bbox_inches='tight')

plt.figure(figsize=(10,5))
sns.histplot(df['Age'], bins=30, kde=True)
plt.title('Age distribution')
plt.savefig('plots/age_hist.png', bbox_inches='tight')

plt.figure(figsize=(10,5))
sns.boxplot(y='Fare', data=df)
plt.title('Fare boxplot')
plt.savefig('plots/fare_box.png', bbox_inches='tight')

# 8. Categorical analysis
plt.figure(figsize=(8,5))
sns.countplot(x='Pclass', hue='Survived', data=df)
plt.title('Pclass vs Survived')
plt.savefig('plots/pclass_vs_survived.png', bbox_inches='tight')

plt.figure(figsize=(8,5))
sns.countplot(x='Sex', hue='Survived', data=df)
plt.title('Sex vs Survived')
plt.savefig('plots/sex_vs_survived.png', bbox_inches='tight')

# 9. Correlation heatmap
# 9. Correlation heatmap (numeric columns only)
numeric_df = df.select_dtypes(include=np.number)  # select only numeric columns
corr = numeric_df.corr()

plt.figure(figsize=(10,8))
sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm')
plt.title('Correlation matrix')
plt.savefig('plots/correlation_heatmap.png', bbox_inches='tight')
plt.show()  # optional, to display plot

# 10. Pairplot (sample for speed)
sns.pairplot(df[['Age','Fare','Pclass','FamilySize','Survived']].sample(500), hue='Survived', diag_kind='kde')
plt.savefig('plots/pairplot_sample.png', bbox_inches='tight')

# 11. Plotly interactive example (saved as HTML)
fig = px.histogram(df, x='Age', color='Survived', nbins=30, marginal='box',
                   title='Age distribution by Survival')
fig.write_html('plots/age_by_survival.html')
